
@if (Loaded)
{
<div class="container">
    <div class="header">
        <sapn class="title">
            @category
        </sapn>
        <span class="formbtn">
                <TelerikButton Class="telerincbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => {WindowVisible = true; weekly = new Weekly(); btnText = "Create";})"><p class="btntext">생성</p></TelerikButton>
        </span>
    </div>
    <div class="reportform">
        <TelerikGrid Data="@Weeklies" Pageable="true" Sortable="true">

            <GridToolBar>
                <GridCommandButton Command="ExcelExport" Icon="file-excel">Export to Excel</GridCommandButton>
                @*<label class="k-checkbox-label"><TelerikCheckBox @bind-Value="@ExportAllPages" />Export All Pages</label>*@
            </GridToolBar>

            <DetailTemplate Context="detailContext">
                @{
                    int currentId = detailContext.Weeklyno;

                    var data = Weeklies.Where(x => x.Weeklyno == currentId);

                    <TelerikListView Data="@data">
                        <Template Context="Load">
                            <div class="crudbtn">
                                <span class="upbtn"><TelerikButton Class="crudbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => UpdateData(Load))">+</TelerikButton></span>
                                <span class="delbtn"><TelerikButton Class="crudbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => {dialog = true; deleteno = Load.Weeklyno;})">x</TelerikButton></span>
                            </div>
                            <div class="data">
                                <div class="data-progress">
                                    <div class="data-header">
                                        @menus[0]
                                    </div>
                                    <div class="data-content">
                                        <p class="cont-text">@Load.Progress</p>
                                    </div>
                                </div>
                                <div class="data-operation">
                                    <div class="data-header">
                                        @menus[1]
                                    </div>
                                    <div class="data-content">
                                        <p class="cont-text">@Load.Operation</p>
                                    </div>
                                </div>
                                <div class="data-issues">
                                    <div class="data-header">
                                        @menus[2]
                                    </div>
                                    <div class="data-content">
                                        <p class="cont-text">@Load.Issue</p>
                                    </div>
                                </div>
                            </div>
                        </Template>
                    </TelerikListView>
                }
            </DetailTemplate>

            <GridColumns>
                <GridColumn Field="Title" Title="제목" Width="45%" />
                <GridColumn Field="Writer" Title="작성자" Width="28%" />
                <GridColumn Field="Important" Title="중요도" Width="27%" />
            </GridColumns>
        </TelerikGrid>
    </div>
</div>

}
<TelerikWindow Class="demo-window" Width="80%" Height="80%" Centered="true" @bind-Visible=@WindowVisible Modal="true">
    <WindowTitle>
        <strong>Create Project</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <TelerikForm Model="@weekly" OnValidSubmit="HandleValidSubmit">
            <FormValidation>
                <DataAnnotationsValidator />
            </FormValidation>
            <FormItems>
                <div class="row">
                    <div class="col-1">
                        <FormItem Field="@nameof(weekly.Category)">
                            <Template>
                                <label for="category" class="">Category</label>
                                <TelerikTextBox Id="category" @bind-Value="@category"></TelerikTextBox>
                                <TelerikValidationMessage For="@(() => weekly.Category)"></TelerikValidationMessage>
                            </Template>
                        </FormItem>
                    </div>
                    <div class="col-2">
                        <FormItem Field="@nameof(weekly.Writer)">
                            <Template>
                                <label for="writer" class="">작성자</label>
                                <TelerikTextBox Id="writer" @bind-Value="@writer"></TelerikTextBox>
                                <TelerikValidationMessage For="@(() => weekly.Writer)"></TelerikValidationMessage>
                            </Template>
                        </FormItem>
                    </div>
                </div>
                <FormItem Field="@nameof(weekly.Title)"></FormItem>
                <div class="row dailybtn">
                    @foreach(var item in dailybtn)
                    {
                        <div class="dailylist"><TelerikButton ButtonType="ButtonType.Button" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => DailyClick(item.Dailyno))">@item.Title</TelerikButton></div>
                    }
                    
                </div>
                <FormItem Field="@nameof(weekly.Progress)" EditorType="@FormEditorType.TextArea"></FormItem>
                <FormItem Field="@nameof(weekly.Operation)" EditorType="@FormEditorType.TextArea"></FormItem>
                <FormItem Field="@nameof(weekly.Issue)" EditorType="@FormEditorType.TextArea"></FormItem>
            </FormItems>
            <FormButtons>
                <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">@btnText</TelerikButton>
            </FormButtons>
        </TelerikForm>
    </WindowContent>
</TelerikWindow>

<TelerikDialog @bind-Visible="@dialog" Width="320px" Title="Warning">
    <DialogContent>
        <p class="dialogText">정말로 삭제하시겠 습니까?</p>
    </DialogContent>
    <DialogButtons>
        <TelerikButton ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => {DeleteData();})">예</TelerikButton>
        <TelerikButton OnClick="@(() => {dialog = false;})">아니오</TelerikButton>
    </DialogButtons>
</TelerikDialog>

@code {
    [Parameter]
    public string category { get; set; } = null!;

    private Weekly weekly { get; set; }
    private Member Loginfo { get; set; }
    private List<Weekly> Weeklies { get; set; }
    private List<Daily> Dailies = new List<Daily>();
    private List<Daily> dailybtn = new List<Daily>();

    private bool Loaded = false;
    public bool WindowVisible { get; set; } = false;
    public bool dialog { get; set; } = false;


    private int deleteno = 0;
    private string[] menus = { "진행", "운영", "이슈" };
    private string writer = string.Empty;
    public string btnText = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        Loginfo = await sessionStorage.GetItemAsync<Member>("loginfo");

        if (Loginfo == null)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            writer = Loginfo.Name;
        }

        LoadData();

        await Task.Delay(1000);

        Loaded = true;
    }

    private void LoadData()
    {
        Weeklies = WeeklyService.WeeklyByCategorySelect(category);
        Dailies = DailyService.DailyByCategorySelect(category);

        CalculationDate();

    }

    async void HandleValidSubmit()
    {
        Console.WriteLine("서밋");
        weekly.Category = category;
        weekly.Writer = writer;
        try
        {
            if (btnText.Equals("Create"))
            {
                Console.WriteLine("생성");
                WeeklyService.WeeklyCreate(weekly);
                Console.WriteLine("성공");
                navigationManager.NavigateTo("/report/" + category, forceLoad: true);
            }
            else
            {
                Console.WriteLine("수정");
                WeeklyService.WeeklyUpdate(weekly.Weeklyno, weekly);
                Console.WriteLine("성공");
                WindowVisible = false;
            }
        }
        catch
        {
            Console.WriteLine("실패");
        }
        await Task.Delay(1000);
    }

    private void UpdateData(Weekly Load)
    {
        btnText = "Update";
        weekly = Load;
        WindowVisible = true;
    }

    private void DeleteData()
    {
        Console.WriteLine("삭제");
        try
        {
            WeeklyService.WeeklyDelete(deleteno);
            Console.WriteLine("성공");
            navigationManager.NavigateTo("/report/" + category, forceLoad: true);
        }
        catch
        {
            Console.WriteLine("실패");
        }
    }

    private void DailyClick(int no)
    {
        Daily daily = DailyService.DailyByNoSelect(no);

        weekly.Progress = weekly.Progress + daily.Progress;
        weekly.Operation = weekly.Operation + daily.Operation;
        weekly.Issue = weekly.Issue + daily.Issue;

    }

    private void CalculationDate()
    {
        int cnt = 0;
        DateTime today = DateTime.Now;
        DayOfWeek week = today.DayOfWeek;
        if(week == DayOfWeek.Monday){
            cnt = 1;
        }else if(week == DayOfWeek.Tuesday)
        {
            cnt = 2;
        }
        else if (week == DayOfWeek.Wednesday)
        {
            cnt = 3;
        }
        else if (week == DayOfWeek.Thursday)
        {
            cnt = 4;
        }
        else if (week == DayOfWeek.Friday)
        {
            cnt = 5;
        }
        else if (week == DayOfWeek.Saturday)
        {
            cnt = 6;
        }
        else if (week == DayOfWeek.Sunday)
        {
            cnt = 7;
        }

        Console.WriteLine(cnt);
        for(int i = 0 ;i < cnt; i++)
        {
            string day = DateTime.Now.AddDays(-i).ToString("yyyyMMdd");

            foreach(var item in Dailies)
            {
                if(item.Title.Equals(day))
                {
                    dailybtn.Add(item);
                }
            }
        }
    }

}

<style>
    .telerincbtn {
        height: 35px;
    }
</style>
@page "/main"

@if (Loaded)
{
    <div class="container">
        <div class="header">
            <span class="title">Project</span>
            <span class="formbtn">
                <TelerikButton Class="telerincbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(() => {WindowVisible = true; btnText = "Create";})"><p class="btntext">생성</p></TelerikButton>
            </span>
        </div>
        <div class="row">
            @foreach(var ProjectInfo in ProjectManages){
                <div class="box">
                    <TelerikGridLayout>
                        <GridLayoutColumns>
                            <GridLayoutColumn Width="100%"></GridLayoutColumn>
                        </GridLayoutColumns>
                        <GridLayoutRows>
                            <GridLayoutRow Height="200px"></GridLayoutRow>
                        </GridLayoutRows>
                        <GridLayoutItems>
                            <GridLayoutItem>
                                <div class="box-header" @onclick=@(() => navigationManager.NavigateTo("/report/" + ProjectInfo.Title))>
                                    <span class="header-title" >@ProjectInfo.Title</span>
                                    <span class="header-state" >
                                        @*진행 상태에 따른 버튼 색/텍스트 삽입*@
                                        @if (ProjectInfo.Progress >= 100)
                                        {
                                            <TelerikButton Class="statebtn end"><p class="btntext">종료</p></TelerikButton>
                                        }else if(ProjectInfo.Progress <= 0)
                                        {
                                            <TelerikButton Class="statebtn pre"><p class="btntext">준비</p></TelerikButton>
                                        }else
                                        {
                                            <TelerikButton Class="statebtn pro"><p class="btntext">진행</p></TelerikButton>
                                        }
                                    </span>
                                </div>
                                <div class="box-content1" @onclick=@(() => navigationManager.NavigateTo("/report/" + ProjectInfo.Title))>
                                    <div class="cont-title">@ProjectInfo.Title 프로젝트</div>
                                </div>
                                <div class="box-content2">
                                    <span class="cont-period">@ProjectInfo.Startperiod.ToShortDateString() ~ @ProjectInfo.Endperiod.ToShortDateString()</span>
                                    <span class="cont-btn">
                                        <TelerikButton Class="crudbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" OnClick="@(async () => UpdateData(ProjectInfo))">+</TelerikButton>
                                        <TelerikButton Class="crudbtn" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">x</TelerikButton>
                                    </span>
                                </div>
                                <div class="progress">
                                    <TelerikProgressBar  Class="progressbar" Max="100" Value="@ProjectInfo.Progress"/>
                                </div>
                                <div class="box-foot">
                                    <div class="foot-content">
                                        <span style="float:left">담당자</span>
                                        <span style="float:right">@ProjectInfo.Manager</span>
                                    </div>
                                </div>
                            </GridLayoutItem>
                        </GridLayoutItems>
                    </TelerikGridLayout>
                </div>
            }
        </div>
    </div>    
}

<TelerikWindow Class="demo-window" Width="80%" Height="70%" Centered="true" @bind-Visible=@WindowVisible Modal="true">
    <WindowTitle>
        <strong>Create Project</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <TelerikForm Model="@projectManage" OnValidSubmit="HandleValidSubmit">
            <FormValidation>
                <DataAnnotationsValidator />
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(projectManage.Title)" EditorType="@FormEditorType.TextArea"></FormItem>
                <FormItem Field="@nameof(projectManage.Manager)" EditorType="@FormEditorType.TextArea"></FormItem>
                <FormItem Field="@nameof(projectManage.Startperiod)" EditorType="@FormEditorType.DateTimePicker"></FormItem>
                <FormItem Field="@nameof(projectManage.Endperiod)" EditorType="@FormEditorType.DateTimePicker"></FormItem>
            </FormItems>
            <FormButtons>
                <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">@btnText</TelerikButton>
            </FormButtons>
        </TelerikForm>
    </WindowContent>
</TelerikWindow>

@code {
    private List<ProjectManage> ProjectManages { get; set; }
    private ProjectManage projectManage = new ProjectManage();
    private string btnText = string.Empty;

    private bool Loaded = false;
    public bool WindowVisible { get; set; }

    protected override void OnInitialized()
    {
        LoadData();

        Loaded = true;
    }

    private void LoadData()
    {
        ProjectManages = ProjectmanageService.ProjectManageAllSelect();

        DateCalculation();
    }

    private void DateCalculation()
    {
        DateTime date = DateTime.Now;
        foreach(var item in ProjectManages)
        {
            TimeSpan duration = item.Endperiod - item.Startperiod;
            TimeSpan dday = date - item.Startperiod;
            item.Totalperiod = duration.Days;
            double start = duration.Days;
            double pro = dday.Days;
            double result = (100 / start) * pro;
            if(result <= 100)
            {
                item.Progress = Convert.ToInt32(result);
            }
            else
            {
                item.Progress = 100;
            }


        }
    }

    async void HandleValidSubmit()
    {
        Console.WriteLine("서밋");
        if (btnText.Equals("Create"))
        {
            ProjectmanageService.ProjectmanageCreate(projectManage);
            Console.WriteLine("생성");
            
        }
        await Task.Delay(1000);
    }

    async void UpdateData(ProjectManage ProjectInfo)
    {
        btnText = "Update";
        projectManage = ProjectInfo;
        await Task.Delay(1000);
        WindowVisible = true;
    }
}


<style type="text/css">
    .statebtn {
        width: 50px;
        height: 25px;
    }

    .end {
        background-color: lightgrey;
    }

    .pre {
        background-color: lightgreen;
    }

    .pro {
        background-color: red;
    }

    .telerincbtn{
        height:35px;
        
    }

    .crudbtn{
        width:12px;
        height:18px;
    }
</style>